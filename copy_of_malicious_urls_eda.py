# -*- coding: utf-8 -*-
"""Copy of Malicious_URLs_EDA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uu1oBGp2PHSxMKK5YFg49pXJ0c7HU7TY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
import string

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix , accuracy_score

from xgboost import XGBClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier

import warnings
warnings.filterwarnings("ignore")

"""# read data"""

df=pd.read_csv("/content/malicious_phish.csv")
df.head()

"""# data analysis"""

df.info()

df.isnull().sum()

df.duplicated().sum()

df=df.drop_duplicates()

df.duplicated().sum()

df.shape

df.describe()

df['url'].value_counts()

df = df.rename(columns={"type": "label"})

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='label', data=df)
plt.title("Distribution of URL Types")
plt.xticks(rotation=45)
plt.show()

df['url_length'] = df['url'].apply(len)

sns.boxplot(x='label', y='url_length', data=df)
plt.title("URL Length by Label")
plt.xticks(rotation=45)
plt.show()

import re

def has_ip(url):
    try:
        domain = url.split('/')[2]

        return 1 if re.match(r'\d+\.\d+\.\d+\.\d+', domain) else 0
    except IndexError:
        return 0

df['has_ip'] = df['url'].apply(has_ip)

df['has_https'] = df['url'].apply(lambda x: 1 if 'https' in x.lower() else 0)

df['has_https'] = df['url'].apply(lambda x: 1 if 'https' in x.lower() else 0)
df['url_length'] = df['url'].apply(lambda x: len(x))
df['num_dots'] = df['url'].apply(lambda x: x.count('.'))

sns.barplot(x='label', y='has_https', data=df)
plt.title("Presence of HTTPS by Label")
plt.show()

"""**important features**"""

df = df[['url', 'label']]

"""# convert classifications into safe or not safe"""

df['label'] = df['label'].apply(lambda x: 'safe' if x == 'benign' else 'not_safe')

"""# Feature Extraction"""

from sklearn.feature_extraction.text import TfidfVectorizer

vectorizer = TfidfVectorizer(max_features=5000)
X = vectorizer.fit_transform(df['url'])

"""# Target"""

y = df['label']

"""# splitting data"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

"""# Train model"""

from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, accuracy_score

model = MultinomialNB()
model.fit(X_train, y_train)

"""# Accuracy"""

y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

def check_url(url):
    vector = vectorizer.transform([url])
    prediction = model.predict(vector)[0]
    return prediction

print(check_url("http://mybank-login-security.com"))

"""# save model"""

import joblib

joblib.dump(model, "url_model.pkl")
joblib.dump(vectorizer, "vectorizer.pkl")

import re
def has_ip(url):
    try:
        domain = url.split('/')[2]
        return 1 if re.match(r'\d+\.\d+\.\d+\.\d+', domain) else 0
    except IndexError:
        return 0

df['has_ip'] = df['url'].apply(has_ip)

df.to_excel("urls_dataset_clean.xlsx", index=False)

